<<<<<<< HEAD
=======
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

>>>>>>> simple
generator client {
  provider = "prisma-client-js"
}

<<<<<<< HEAD
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")  // Подставьте URL новой Neon-базы
}

model User {
  id                         Int                    @id @default(autoincrement())
  userName                   String                 @unique
  email                      String                 @unique
  password                   String?
  googleId                   String?                @unique
  avatarUrl                  String?
  createdAt                  DateTime               @default(now())
  messages                  Message[]              @relation("AuthorToMessages")
  messageReactions          MessageReaction[]      
  comments                  Comment[]              
  commentReactions          CommentReaction[]      
  sentPrivateMessages       PrivateMessage[]       @relation("Sender")
  receivedPrivateMessages   PrivateMessage[]       @relation("Receiver")
  chatsAsParticipant1       PrivateChat[]          @relation("Participant1")
  chatsAsParticipant2       PrivateChat[]          @relation("Participant2")
  presence                  UserPresence?          @relation(fields: [presenceId], references: [id])
  presenceId                Int?                   @unique
  @@index([email, userName])
}

model UserPresence {
  id          Int      @id @default(autoincrement())
  isOnline    Boolean  @default(false)
  lastSeenAt  DateTime @default(now())
  user        User?
}

model Message {
  id              Int                 @id @default(autoincrement())
  text            String
  createdAt       DateTime            @default(now())
  author          User                @relation("AuthorToMessages", fields: [authorId], references: [id])
  authorId        Int
  reactions      MessageReaction[]
  comments       Comment[]           
  @@index([authorId, createdAt])
}

model MessageReaction {
  id        Int     @id @default(autoincrement())
  userId    Int
  messageId Int
  reaction  String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  @@unique([userId, messageId])
}

model Comment {
  id          Int               @id @default(autoincrement())
  text        String
  createdAt   DateTime          @default(now())
  author      User              @relation(fields: [authorId], references: [id])
  authorId    Int
  message     Message           @relation(fields: [messageId], references: [id])
  messageId   Int
  reactions  CommentReaction[] 
  @@index([authorId, messageId, createdAt])
}

model CommentReaction {
  id        Int     @id @default(autoincrement())
  userId    Int
  commentId Int
  reaction  String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  @@unique([userId, commentId])
}

model PrivateChat {
  id              Int              @id @default(autoincrement())
  participant1    User             @relation("Participant1", fields: [participant1Id], references: [id])
  participant1Id  Int
  participant2    User             @relation("Participant2", fields: [participant2Id], references: [id])
  participant2Id  Int
  messages       PrivateMessage[] 
  createdAt      DateTime         @default(now())
  @@unique([participant1Id, participant2Id])
}

model PrivateMessage {
  id          Int          @id @default(autoincrement())
  text        String       @db.Text
  createdAt   DateTime     @default(now())
  chat        PrivateChat  @relation(fields: [chatId], references: [id])
  chatId      Int
  sender      User         @relation("Sender", fields: [senderId], references: [id])
  senderId    Int
  receiver    User         @relation("Receiver", fields: [receiverId], references: [id])
  receiverId  Int
  @@index([chatId, createdAt])
}
=======
model User {
  id                Int             @id @default(autoincrement())
  email             String          @unique
  name              String
  password          String?  
  googleId          String?  
  createdAt         DateTime        @default(now())
  isLoggedIn        Boolean         @default(false)
  picture           String?    
  posts             Post[]
  comments          Comment[]
  postLikes         PostLike[]
  postDislikes      PostDislike[]
  commentLikes      CommentLike[]
  commentDislikes   CommentDislike[]
  chatsCreated      Chat[]          @relation("ChatCreator")
  chatsParticipated Chat[]          @relation("ChatParticipant")
  messages          Message[]       @relation("UserMessages")
}

model Chat {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true)
  creatorId     Int
  creator       User      @relation("ChatCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  participantId Int
  participant   User      @relation("ChatParticipant", fields: [participantId], references: [id], onDelete: Cascade)
  messages      Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    Int
  sender    User     @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId  Int
}

model Post {
  id         Int        @id @default(autoincrement())
  title      String
  text       String
  category   String
  createdAt  DateTime   @default(now())
  creatorId  Int
  creator    User       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  comments   Comment[]
  likes      PostLike[]
  dislikes   PostDislike[]
}

model Comment {
  id         Int          @id @default(autoincrement())
  text       String
  createdAt  DateTime     @default(now())
  userId     Int
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId     Int
  post       Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentLikes CommentLike[]
  commentDislikes CommentDislike[]
}

model PostLike {
  id      Int  @id @default(autoincrement())
  post    Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int

  @@unique([postId, userId])
}

model PostDislike {
  id      Int  @id @default(autoincrement())
  post    Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int

  @@unique([postId, userId])
}

model CommentLike {
  id         Int      @id @default(autoincrement())
  comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId  Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int

  @@unique([commentId, userId])
}

model CommentDislike {
  id         Int      @id @default(autoincrement())
  comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId  Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int

  @@unique([commentId, userId])
}
>>>>>>> simple
