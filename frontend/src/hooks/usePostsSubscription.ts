import { useState, useEffect } from "react";
import { useSubscription } from "@apollo/client";
import {
  GET_ALL_POSTS,
  GET_ALL_CATEGORIES,
  GET_ALL_COMMENTS,
} from "@/apolo/queryes";
import {
  POST_CREATED_SUBSCRIPTION,
  POST_DELETED_SUBSCRIPTION,
  POST_LIKED_SUBSCRIPTION,
  POST_DISLIKED_SUBSCRIPTION,
  COMMENT_CREATED_SUBSCRIPTION,
  COMMENT_DELETED_SUBSCRIPTION,
} from "@/apolo/subscriptions";
import { useStateContext } from "@/components/StateProvider";
const POSTS_PER_PAGE = 5;

export default function useUserPostSubscriptions(
  setCurrentPage,
  currentPage,
  setTotalCount,
  setPosts,
  setPostsLoading,
  catToFilter
) {
  const { showModal } = useStateContext();

  useSubscription(POST_CREATED_SUBSCRIPTION, {
    onData: ({ client, data }) => {
      // –∏—Å–ø—Ä–∞–≤–ª—è–µ–º: —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π .data
      const newPost = data?.data?.postCreated;
      console.log("<===== üü¢ SUBSCRIPTION postCreated =======>", newPost);
      if (!newPost) return;

      if (currentPage !== 1) {
        setCurrentPage(1);
      }

      showModal(`‚úÖ Post created successfully!`);
      client.refetchQueries({
        include: [GET_ALL_POSTS, GET_ALL_CATEGORIES],
      });
    },
  });

  useSubscription(POST_DELETED_SUBSCRIPTION, {
    onData: ({ client, data }) => {
      const deletedPostId = data?.data?.postDeleted;
      if (!deletedPostId) return;

      console.log("<===== üü¢ SUBSCRIPTION postDeleted =======>", deletedPostId);
      showModal("üóëÔ∏è Post deleted successfully.");

      // –û–±–Ω–æ–≤–ª—è–µ–º totalCount –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º currentPage
      setTotalCount((prev) => {
        const newTotalCount = prev - 1;
        const totalPages = Math.ceil(newTotalCount / POSTS_PER_PAGE);

        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é
        if (currentPage > totalPages && totalPages > 0) {
          setCurrentPage(totalPages);
        } else if (totalPages === 0) {
          setCurrentPage(1); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç
        }

        return newTotalCount;
      });

      // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å GET_ALL_POSTS —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      client.refetchQueries({
        include: [GET_ALL_POSTS, GET_ALL_CATEGORIES],
        variables: {
          page: currentPage,
          postsPerPage: POSTS_PER_PAGE,
          category: catToFilter || undefined, // –£—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        },
      });
    },
  });

  useSubscription(POST_LIKED_SUBSCRIPTION, {
    onData: ({ client, data }) => {
      const postId = data?.data?.postLiked;
      if (!postId) return;

      console.log("<===== üü¢ SUBSCRIPTION postLiked =======>", postId);
      // showModal("üëç Post liked successfully.");

      client.cache.modify({
        id: client.cache.identify({ __typename: "Post", _id: updatedPost._id }),
        fields: {
          likesCount() {
            return updatedPost.likesCount;
          },
          // –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        },
      });
    },
  });

  useSubscription(POST_DISLIKED_SUBSCRIPTION, {
    onData: ({ client, data }) => {
      const postId = data?.data?.postDisliked;
      if (!postId) return;

      console.log("<===== üü¢ SUBSCRIPTION postDisliked =======>", postId);
      // showModal("üëé Post disliked successfully.");

      client.cache.modify({
        id: client.cache.identify({ __typename: "Post", _id: updatedPost._id }),
        fields: {
          dislikesCont() {
            return updatedPost.dislikesCount;
          },
        },
      });
    },
  });

  useSubscription(COMMENT_CREATED_SUBSCRIPTION, {
    onData: ({ client, data }) => {
      const newComment = data?.data?.commentAdded;
      if (!newComment) return;

      console.log("<===== üü¢ SUBSCRIPTION commentCreated =======>", newComment);
      showModal(`‚úÖ Comment created successfully!`);
      client.refetchQueries({
        include: [GET_ALL_COMMENTS],
      });
    },
  });

  useSubscription(COMMENT_DELETED_SUBSCRIPTION, {
    onData: ({ client, data }) => {
      const deletedCommentId = data?.data?.commentDeleted;
      if (!deletedCommentId) return;

      console.log(
        "<===== üü¢ SUBSCRIPTION commentDeleted =======>",
        deletedCommentId
      );
      showModal("üóëÔ∏è Comment deleted successfully.");
      client.refetchQueries({
        include: [GET_ALL_COMMENTS],
      });
    },
  });
}
